// thinking of string

struct string {
    ptr uint8 data;
    uint32 len;
}

join string
public fun Chars() -> Iterator<char> {
    // UTF-8 decoder here
}

join string
public fun ToString() -> own String {
    // Allocate, copy, return
}

// join Core;
struct String {

}


// === Enumerations defining validation and action kinds ===

enum class DeclValidationKind {
    None,
    Shallow,
    Full,
    // Future: Lint, BorrowCheck, etc.
};

enum class DeclActionKind {
    None,
    ShallowTypeCheck,
    FullTypeCheck,
    ShallowScaffolding,
    FullScaffolding,
    CodeGen,
    // Extend as needed
};

// === Interfaces for validators and actions ===

class DeclValidator {
public:
    virtual ~DeclValidator() = default;
    virtual bool validate(const Decl* decl, DeclValidationKind kind) = 0;
};

class DeclAction {
public:
    virtual ~DeclAction() = default;
    virtual bool perform(Decl* decl, DeclActionKind kind) = 0;
};

// === DeclState holds info and delegates validation/action ===

class DeclState {
    DeclKind kind;
    // Other fields...

public:
    DeclKind getKind() const { return kind; }

    DeclValidator* getValidator() const;
    DeclAction* getAction() const;
    // Implement these to return registered handlers for kind
};

// === Decl wraps DeclState and offers API ===

class Decl {
    DeclState* state;

public:
    Decl(DeclState* s) : state(s) {}

    bool validate(DeclValidationKind kind) const {
        if (auto validator = state->getValidator())
            return validator->validate(this, kind);
        return true; // No validator = implicitly valid
    }

    bool performAction(DeclActionKind kind) {
        if (auto action = state->getAction())
            return action->perform(this, kind);
        return true; // No action = no-op
    }
};

// === Registry example (simplified) ===

class ASTSession {
    std::unordered_map<DeclKind, std::unique_ptr<DeclValidator>> validators;
    std::unordered_map<DeclKind, std::unique_ptr<DeclAction>> actions;

public:
    DeclValidator* getValidator(DeclKind kind) {
        auto it = validators.find(kind);
        return (it != validators.end()) ? it->second.get() : nullptr;
    }

    DeclAction* getAction(DeclKind kind) {
        auto it = actions.find(kind);
        return (it != actions.end()) ? it->second.get() : nullptr;
    }

    void registerValidator(DeclKind kind, std::unique_ptr<DeclValidator> validator) {
        validators[kind] = std::move(validator);
    }

    void registerAction(DeclKind kind, std::unique_ptr<DeclAction> action) {
        actions[kind] = std::move(action);
    }
};

// === Usage: in DeclState **getValidator** and **getAction**

// Example implementations

DeclValidator* DeclState::getValidator() const {
    return GetASTSession().getValidator(kind);
}

DeclAction* DeclState::getAction() const {
    return GetASTSession().getAction(kind);
}


class DeclActionEvaluator {
public:
    void Evaluate(Decl* decl, DeclActionKind action) {
        switch (action) {
            case DeclActionKind::ValidateShallow:
                PerformShallowValidation(decl);
                break;
            case DeclActionKind::ValidateFull:
                PerformFullValidation(decl);
                break;
            case DeclActionKind::ScaffoldingShallow:
                PerformScaffolding(decl, /*shallow=*/true);
                break;
            case DeclActionKind::ScaffoldingFull:
                PerformScaffolding(decl, /*shallow=*/false);
                break;
            case DeclActionKind::TypeCheckShallow:
                PerformTypeCheck(decl, /*shallow=*/true);
                break;
            case DeclActionKind::TypeCheckFull:
                PerformTypeCheck(decl, /*shallow=*/false);
                break;
            case DeclActionKind::CodeGen:
                GenerateCode(decl);
                break;
            default:
                break;
        }
    }

private:
    void PerformShallowValidation(Decl* decl);
    void PerformFullValidation(Decl* decl);
    void PerformScaffolding(Decl* decl, bool shallow);
    void PerformTypeCheck(Decl* decl, bool shallow);
    void GenerateCode(Decl* decl);
};


class Decl {
public:
    void Evaluate(DeclActionKind kind) {
        ASTSession::Get().GetDeclActionEvaluator().Evaluate(this, kind);
    }
};

using DeclActionHandler = std::function<void(Decl*, DeclActionKind)>;

std::unordered_map<DeclKind, DeclActionHandler> handlers;

void RegisterHandler(DeclKind kind, DeclActionHandler handler);

if (auto it = handlers.find(decl->GetKind()); it != handlers.end()) {
    it->second(decl, action);
} else {
    DefaultEvaluate(decl, action);
}





class DeclEvaluatorRegistry {
  std::unordered_map<DeclEvaluatorKind, std::unique_ptr<DeclEvaluator>> evaluators;

public:
  void Register(std::unique_ptr<DeclEvaluator> evaluator) {
    evaluators[evaluator->GetKind()] = std::move(evaluator);
  }

  DeclEvaluator* Get(DeclEvaluatorKind kind) const {
    auto it = evaluators.find(kind);
    return (it != evaluators.end()) ? it->second.get() : nullptr;
  }
};

Decl* decl = ...;
if (auto* evaluator = registry.Get(DeclEvaluatorKind::FullTypeCheck)) {
  evaluator->Evaluate(decl);
}

class DeclEvaluatorContext {
  // e.g. pass source location, diagnostics engine, flags, etc.
};

virtual void Evaluate(Decl* decl, DeclEvaluatorContext& ctx) = 0;


class DeclEvaluatorContext {
  DeclState* state;
  DiagnosticEngine* diags;
  SourceLoc sourceLoc;
  bool isIDEContext = false;
  bool suppressErrors = false;
  // etc.

public:
  explicit DeclEvaluatorContext(DeclState* state) : state(state) {}

  DeclState* GetState() const { return state; }
  DiagnosticEngine* GetDiags() const { return diags; }
  // More accessors...
};


void Evaluate(Decl* decl, DeclEvaluatorContext& ctx) override {
  auto* state = ctx.GetState();
  auto* type = state->GetTypeState();
  // Use diagnostics engine, source location, phase flags, etc.
}

class DeclEvaluator {
public:
  virtual ~DeclEvaluator() = default;
  virtual DeclEvaluatorKind GetKind() const = 0;
  virtual void Evaluate(Decl* decl, DeclEvaluatorContext& ctx) = 0;
};


class CodeGenEvaluator : public DeclEvaluator {
public:
  DeclEvaluatorKind GetKind() const override {
    return DeclEvaluatorKind::CodeGen;
  }

  void Evaluate(Decl* decl, DeclEvaluatorContext& ctx) override {
    // Emit IR, object code, etc.
  }
};

class ASTSession {
  std::unordered_map<DeclEvaluatorKind, std::unique_ptr<DeclEvaluator>> evaluators;

public:
  void RegisterEvaluator(std::unique_ptr<DeclEvaluator> eval) {
    evaluators[eval->GetKind()] = std::move(eval);
  }

  DeclEvaluator* GetEvaluator(DeclEvaluatorKind kind) const {
    auto it = evaluators.find(kind);
    return it != evaluators.end() ? it->second.get() : nullptr;
  }
};

bool Decl::Evaluate(DeclEvaluatorKind kind) {
  if (auto* session = GetASTSession()) {
    if (auto* eval = session->GetEvaluator(kind)) {
      DeclEvaluatorContext ctx(GetDeclState());
      eval->Evaluate(this, ctx);
      return true;
    }
  }
  return false;
}

decl->Evaluate(DeclEvaluatorKind::CodeGen);


REGISTER_DECL_EVALUATOR(CodeGenEvaluator);



//DeclEvaluatorRegistry.h
#pragma once

#include <memory>
#include "DeclEvaluator.h"
#include "ASTSession.h"

// Global or thread-local access to ASTSession
ASTSession& GetGlobalASTSession();

// Macro to register a DeclEvaluator subclass
#define REGISTER_DECL_EVALUATOR(EvaluatorType) \
  namespace { \
    struct EvaluatorType##Registration { \
      EvaluatorType##Registration() { \
        auto evaluator = std::make_unique<EvaluatorType>(); \
        GetGlobalASTSession().RegisterEvaluator(std::move(evaluator)); \
      } \
    }; \
    static EvaluatorType##Registration _reg_##EvaluatorType; \
  }


class CodeGenEvaluator : public DeclEvaluator {
public:
  DeclEvaluatorKind GetKind() const override {
    return DeclEvaluatorKind::CodeGen;
  }

  void Evaluate(Decl* decl, DeclEvaluatorContext& ctx) override {
    // Code generation logic
  }
};

// Register it at static initialization time
REGISTER_DECL_EVALUATOR(CodeGenEvaluator);


// ASTSessin
#define REGISTER_DECL_EVALUATOR_IN_SESSION(EvaluatorType, session) \
  { \
    auto evaluator = std::make_unique<EvaluatorType>(); \
    (session).RegisterEvaluator(std::move(evaluator)); \
  }




///
// ID, Parent
DECL_EVALUATOR(ShallowTypeCheck, DeclEvaluator)
DECL_EVALUATOR(FullTypeCheck, DeclEvaluator)
DECL_EVALUATOR(ShallowScaffolding, DeclEvaluator)
DECL_EVALUATOR(FullScaffolding, DeclEvaluator)
DECL_EVALUATOR(ShallowValidation, DeclEvaluator)
DECL_EVALUATOR(FullValidation, DeclEvaluator)
DECL_EVALUATOR(CodeGen, DeclEvaluator)
DECL_EVALUATOR(Desugar, DeclEvaluator)
DECL_EVALUATOR(Elaboration, DeclEvaluator)



class ASTSession {
  // Evaluator field declarations
#define DECL_EVALUATOR(ID, Parent) Parent* ID##Evaluator = nullptr;
#include "stone/AST/DeclEvaluatorNode.def"

  std::unordered_map<DeclEvaluatorKind, DeclEvaluator*> evaluatorMap;

public:
  void RegisterEvaluators();
  DeclEvaluator* GetEvaluator(DeclEvaluatorKind kind);
};
#include "stone/AST/DeclEvaluatorNode.def"
#include "stone/AST/DeclEvaluator.h"

void ASTSession::RegisterEvaluators() {
#define DECL_EVALUATOR(ID, Parent)                                \
  ID##Evaluator = new (*this) ID##Evaluator();                    \
  evaluatorMap.emplace(DeclEvaluatorKind::ID, ID##Evaluator);
#include "stone/AST/DeclEvaluatorNode.def"
}

DeclEvaluator* ASTSession::GetEvaluator(DeclEvaluatorKind kind) {
  auto it = evaluatorMap.find(kind);
  return it != evaluatorMap.end() ? it->second : nullptr;
}

DeclEvaluator* evaluator = session.GetEvaluator(DeclEvaluatorKind::CodeGen);
if (evaluator) {
  evaluator->Evaluate(decl, ctx);
}
stonec|stonef [action] [artifact] [modifiers] <input>


using Core.Maths[struct Vector3];
using Core.Maths[fun DotProduct];
using Core.Maths[enum Axis];
using Core.Graphics[interface Drawable];
using Core.Maths[struct *];   // All structs
using Core.Maths[*];          // All visible entities



struct SpaceKey {
  Identifier name;
  std::vector<Identifier> parameters;

  bool operator==(const SpaceKey& other) const {
    return name == other.name && parameters == other.parameters;
  }
};

// Custom hash
namespace std {
template <>
struct hash<SpaceKey> {
  size_t operator()(const SpaceKey& key) const {
    size_t h = hash<Identifier>()(key.name);
    for (const auto& param : key.parameters)
      h ^= hash<Identifier>()(param) + 0x9e3779b9 + (h << 6) + (h >> 2);
    return h;
  }
};
}
using ASTEntity = llvm::PointerUnion<Decl*, Expr*>;

class DeclHierarchy {
    ASTEntity entity;

public:
    DeclHierarchy(ASTEntity e) : entity(e) {}

    void walk() {
        if (Decl* D = entity.dyn_cast<Decl*>()) {
            // Work directly with Decl
        } else if (Expr* E = entity.dyn_cast<Expr*>()) {
            // Work directly with Expr
        }
    }

    Decl* asDecl() const { return entity.dyn_cast<Decl*>(); }
    Expr* asExpr() const { return entity.dyn_cast<Expr*>(); }
};


class DotPath final {
  llvm::SmallVector<Identifier, 4> segments;

public:
  DotPath() = default;

  void AddSegment(Identifier id) { segments.push_back(id); }
  llvm::ArrayRef<Identifier> GetSegments() const { return segments; }

  Identifier GetHead() const { return segments.front(); }
  Identifier GetTail() const { return segments.back(); }

  std::string str() const {
    std::string result;
    for (size_t i = 0; i < segments.size(); ++i) {
      if (i > 0) result += '.';
      result += segments[i].str();
    }
    return result;
  }
};


------------------

#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <memory>

// --- 1. EvaluatorRequestKind enum ---
enum class EvaluatorRequestKind {
    SyntaxParseDecl,
    TypeCheckDecl,
};

// --- 2. Base EvaluatorRequest ---
class EvaluatorRequest {
public:
    EvaluatorRequestKind kind;
    void* payload;

    EvaluatorRequest(EvaluatorRequestKind k, void* p) : kind(k), payload(p) {}
    virtual ~EvaluatorRequest() = default;

    virtual bool cacheable() const { return true; }

    virtual size_t hashKey() const {
        return std::hash<void*>{}(payload) ^ std::hash<int>{}(static_cast<int>(kind));
    }

    // Dependency declarations, override if needed
    virtual std::vector<EvaluatorRequest> dependencies() const {
        return {};
    }

    // Equality operator for using in maps (simplified)
    bool operator==(const EvaluatorRequest& other) const {
        return kind == other.kind && payload == other.payload;
    }
};

// Needed to use EvaluatorRequest as a key in unordered_map/set
namespace std {
    template <>
    struct hash<EvaluatorRequest> {
        size_t operator()(const EvaluatorRequest& req) const {
            return req.hashKey();
        }
    };
}

// --- 3. ResultValue ---
class ResultValue {
    bool success;
    std::string value;
    std::string error;

public:
    static ResultValue successResult(const std::string& val) {
        return ResultValue(true, val, "");
    }

    static ResultValue errorResult(const std::string& err) {
        return ResultValue(false, "", err);
    }

    bool isSuccess() const { return success; }
    const std::string& getValue() const { return value; }
    const std::string& getError() const { return error; }

private:
    ResultValue(bool ok, std::string val, std::string err)
        : success(ok), value(std::move(val)), error(std::move(err)) {}
};

// --- 4. Dummy Parser, Decl, Logic ---
class Parser {
public:
    std::string parse(const std::string& source) {
        return "ParsedDecl(" + source + ")";
    }
};

class Decl {
public:
    std::string name;
    std::string source;

    Decl(std::string n, std::string s) : name(std::move(n)), source(std::move(s)) {}
};

class Logic {
public:
    std::string typeCheck(Decl* decl) {
        if (decl->name == "x") {
            return "Int";
        } else {
            return "UnknownType";
        }
    }
};

// --- 5. DependencyGraph ---
class DependencyGraph {
    // Map from a request's hashKey to its dependencies' hashKeys
    std::unordered_map<size_t, std::unordered_set<size_t>> graph;

public:
    void addDependency(const EvaluatorRequest& req, const EvaluatorRequest& dep) {
        graph[req.hashKey()].insert(dep.hashKey());
    }

    std::unordered_set<size_t> getDependents(size_t reqKey) const {
        std::unordered_set<size_t> dependents;
        for (auto& [key, deps] : graph) {
            if (deps.find(reqKey) != deps.end()) {
                dependents.insert(key);
            }
        }
        return dependents;
    }

    void removeDependencies(size_t reqKey) {
        graph.erase(reqKey);
        for (auto& [key, deps] : graph) {
            deps.erase(reqKey);
        }
    }
};

// --- 6. RequestCache ---
class RequestCache {
    std::unordered_map<size_t, ResultValue> cache;

public:
    bool has(size_t key) const {
        return cache.find(key) != cache.end();
    }

    ResultValue get(size_t key) const {
        return cache.at(key);
    }

    void store(size_t key, const ResultValue& val) {
        cache[key] = val;
    }

    void invalidate(size_t key) {
        cache.erase(key);
    }
};

// --- 7. AbstractEvaluator and concrete evaluators ---
class EvaluatorEngine; // Forward declaration

class AbstractEvaluator {
public:
    virtual ~AbstractEvaluator() = default;
    virtual bool canHandle(const EvaluatorRequest& req) const = 0;
    virtual ResultValue evaluate(const EvaluatorRequest& req, EvaluatorEngine& engine) = 0;
};

class SyntaxEvaluator : public AbstractEvaluator {
    Parser parser;

public:
    bool canHandle(const EvaluatorRequest& req) const override {
        return req.kind == EvaluatorRequestKind::SyntaxParseDecl;
    }

    ResultValue evaluate(const EvaluatorRequest& req, EvaluatorEngine&) override {
        auto source = static_cast<std::string*>(req.payload);
        std::string parsed = parser.parse(*source);
        return ResultValue::successResult(parsed);
    }
};

class TypeCheckEvaluator : public AbstractEvaluator {
    Logic checker;

public:
    bool canHandle(const EvaluatorRequest& req) const override {
        return req.kind == EvaluatorRequestKind::TypeCheckDecl;
    }

    ResultValue evaluate(const EvaluatorRequest& req, EvaluatorEngine&) override {
        auto decl = static_cast<Decl*>(req.payload);
        std::string ty = checker.typeCheck(decl);
        return ResultValue::successResult(ty);
    }
};

// --- 8. Specialized Request with dependencies ---

class TypeCheckDeclRequest : public EvaluatorRequest {
public:
    Decl* decl;

    TypeCheckDeclRequest(Decl* d)
        : EvaluatorRequest(EvaluatorRequestKind::TypeCheckDecl, d), decl(d) {}

    std::vector<EvaluatorRequest> dependencies() const override {
        // Depends on syntax parse of the decl's source text
        return { EvaluatorRequest(EvaluatorRequestKind::SyntaxParseDecl, (void*)&decl->source) };
    }

    size_t hashKey() const override {
        // You can customize hashKey to include decl pointer, or just use base:
        return EvaluatorRequest::hashKey();
    }
};

// --- 9. EvaluatorEngine implementation ---

class EvaluatorEngine {
    RequestCache cache;
    DependencyGraph depGraph;
    std::vector<std::unique_ptr<AbstractEvaluator>> evaluators;

    // For demonstration, keep a map of requests by key to enable invalidation recursion
    std::unordered_map<size_t, EvaluatorRequest> requestMap;

public:
    void registerEvaluator(std::unique_ptr<AbstractEvaluator> eval) {
        evaluators.emplace_back(std::move(eval));
    }

    ResultValue evaluate(const EvaluatorRequest& req) {
        size_t key = req.hashKey();

        // Store the request for invalidation tracking
        requestMap[key] = req;

        if (req.cacheable() && cache.has(key)) {
            return cache.get(key);
        }

        for (auto& evaluator : evaluators) {
            if (evaluator->canHandle(req)) {
                ResultValue result = evaluator->evaluate(req, *this);

                if (req.cacheable() && result.isSuccess()) {
                    cache.store(key, result);
                }

                // Record dependencies
                for (auto& dep : req.dependencies()) {
                    depGraph.addDependency(req, dep);
                }

                return result;
            }
        }

        return ResultValue::errorResult("No evaluator found for request");
    }

    // Invalidate a request and its dependents recursively
    void invalidate(const EvaluatorRequest& req) {
        size_t key = req.hashKey();
        cache.invalidate(key);
        depGraph.removeDependencies(key);

        auto dependents = depGraph.getDependents(key);
        for (auto depKey : dependents) {
            if (requestMap.find(depKey) != requestMap.end()) {
                invalidate(requestMap[depKey]);
            }
        }
    }
};

// --- 10. Main test ---

int main() {
    EvaluatorEngine engine;

    engine.registerEvaluator(std::make_unique<SyntaxEvaluator>());
    engine.registerEvaluator(std::make_unique<TypeCheckEvaluator>());

    std::string sourceCode = "var x = 42;";
    Decl declX("x", sourceCode);

    // Create specialized request for type checking decl
    TypeCheckDeclRequest typeCheckReq(&declX);

    // Evaluate type check (which depends on syntax parse)
    ResultValue typeCheckResult = engine.evaluate(typeCheckReq);
    std::cout << "TypeCheck result: " << (typeCheckResult.isSuccess() ? typeCheckResult.getValue() : typeCheckResult.getError()) << "\n";

    // Evaluate syntax parse directly
    EvaluatorRequest parseReq(EvaluatorRequestKind::SyntaxParseDecl, &sourceCode);
    ResultValue parseResult = engine.evaluate(parseReq);
    std::cout << "Syntax parse result: " << (parseResult.isSuccess() ? parseResult.getValue() : parseResult.getError()) << "\n";

    // Cached calls
    std::cout << "Cached TypeCheck result: " << engine.evaluate(typeCheckReq).getValue() << "\n";
    std::cout << "Cached Syntax parse result: " << engine.evaluate(parseReq).getValue() << "\n";

    // Now invalidate the syntax parse (simulate source change)
    std::cout << "Invalidating syntax parse due to source change...\n";
    engine.invalidate(parseReq);

    // Re-evaluate after invalidation, should recompute both
    ResultValue typeCheckResult2 = engine.evaluate(typeCheckReq);
    std::cout << "Recomputed TypeCheck result: " << (typeCheckResult2.isSuccess() ? typeCheckResult2.getValue() : typeCheckResult2.getError()) << "\n";

    return 0;
}


-----------------------
// 1. RequestKind (strongly typed or enum class)
enum class RequestKind {
    // Frontend examples:
    SyntaxParse,
    TypeCheck,

    // Driver examples:
    CompileJob,
    LinkJob,
    PreprocessJob,

    // Extendable...
};

// 2. Abstract base Request
class AbstractRequest {
public:
    virtual ~AbstractRequest() = default;
    virtual RequestKind kind() const = 0;

    // Unique key for caching and dependency tracking
    virtual size_t key() const = 0;

    // Whether the result should be cached
    virtual bool cacheable() const { return true; }

    // Declares dependencies of this request
    virtual std::vector<std::shared_ptr<AbstractRequest>> dependencies() const {
        return {};
    }
};

// 3. Result wrapper
class ResultValue {
    // Success flag, error info, and arbitrary payload (string here for simplicity)
    bool success_;
    std::string payload_;
    std::string error_;

public:
    static ResultValue success(std::string val) { return ResultValue(true, std::move(val), ""); }
    static ResultValue error(std::string err) { return ResultValue(false, "", std::move(err)); }

    bool isSuccess() const { return success_; }
    const std::string& payload() const { return payload_; }
    const std::string& error() const { return error_; }

private:
    ResultValue(bool s, std::string p, std::string e) : success_(s), payload_(p), error_(e) {}
};

// 4. AbstractEvaluator interface
class AbstractEvaluator {
public:
    virtual ~AbstractEvaluator() = default;

    // Checks if this evaluator can handle the request
    virtual bool canEvaluate(const AbstractRequest& request) const = 0;

    // Evaluates the request, possibly using the engine to evaluate dependencies
    virtual ResultValue evaluate(const AbstractRequest& request,
                                 class EvaluatorEngine& engine) = 0;
};

// 5. DependencyGraph (basic)
class DependencyGraph {
    std::unordered_map<size_t, std::unordered_set<size_t>> edges_;

public:
    void addDependency(size_t requestKey, size_t dependencyKey) {
        edges_[requestKey].insert(dependencyKey);
    }

    std::unordered_set<size_t> getDependents(size_t requestKey) const {
        std::unordered_set<size_t> dependents;
        for (const auto& [key, deps] : edges_) {
            if (deps.find(requestKey) != deps.end()) {
                dependents.insert(key);
            }
        }
        return dependents;
    }

    void removeDependencies(size_t requestKey) {
        edges_.erase(requestKey);
        for (auto& [key, deps] : edges_) {
            deps.erase(requestKey);
        }
    }
};

// 6. RequestCache (basic)
class RequestCache {
    std::unordered_map<size_t, ResultValue> cache_;

public:
    bool has(size_t key) const { return cache_.find(key) != cache_.end(); }
    ResultValue get(size_t key) const { return cache_.at(key); }
    void store(size_t key, ResultValue result) { cache_[key] = std::move(result); }
    void invalidate(size_t key) { cache_.erase(key); }
};

// 7. EvaluatorEngine - core engine to evaluate requests, cache results, track dependencies
class EvaluatorEngine {
    RequestCache cache_;
    DependencyGraph depGraph_;
    std::vector<std::unique_ptr<AbstractEvaluator>> evaluators_;

    // For invalidation recursion, store shared_ptr<AbstractRequest> keyed by key
    std::unordered_map<size_t, std::shared_ptr<AbstractRequest>> requests_;

public:
    void registerEvaluator(std::unique_ptr<AbstractEvaluator> evaluator) {
        evaluators_.push_back(std::move(evaluator));
    }

    ResultValue evaluate(std::shared_ptr<AbstractRequest> request) {
        size_t key = request->key();
        requests_[key] = request;

        if (request->cacheable() && cache_.has(key)) {
            return cache_.get(key);
        }

        for (auto& eval : evaluators_) {
            if (eval->canEvaluate(*request)) {
                ResultValue result = eval->evaluate(*request, *this);

                if (request->cacheable() && result.isSuccess()) {
                    cache_.store(key, result);
                }

                for (auto& dep : request->dependencies()) {
                    depGraph_.addDependency(key, dep->key());
                }

                return result;
            }
        }

        return ResultValue::error("No evaluator found");
    }

    void invalidate(std::shared_ptr<AbstractRequest> request) {
        size_t key = request->key();
        cache_.invalidate(key);
        depGraph_.removeDependencies(key);

        auto dependents = depGraph_.getDependents(key);
        for (auto depKey : dependents) {
            if (requests_.count(depKey)) {
                invalidate(requests_[depKey]);
            }
        }
    }
};


