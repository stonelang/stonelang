#ifndef STONE_CODEGEN_CODEGENMODULE_H
#define STONE_CODEGEN_CODEGENMODULE_H

#include "llvm/IR/LegacyPassManager.h"
#include "llvm/IR/PassManager.h"
#include "llvm/Passes/PassBuilder.h"
#include "llvm/Target/TargetMachine.h"

namespace llvm {
class Type;
class FunctionType;
class IntegerType;
class PointerType;
} // namespace llvm

namespace stone {

class CodeGenModule final {
public:
  // The ABI version of the Stone data generated by this file.
  static const uint32_t StoneABIVersion = 1;

public:
  llvm::Type *VoidTy;
  llvm::IntegerType *Int8Ty;  /// i8
  llvm::IntegerType *Int16Ty; /// i16
  llvm::IntegerType *Int32Ty; /// i32
  llvm::IntegerType *Int64Ty; /// i64
  llvm::IntegerType *IntTy;   /// int
  llvm::IntegerType *CharTy;  /// char

  llvm::PointerType *Int8PtrTy;  /// i16*
  llvm::PointerType *Int16PtrTy; /// i16*
  llvm::PointerType *Int32PtrTy; /// i32*
  llvm::PointerType *Int64PtrTy; /// i64*
  llvm::PointerType *IntPtrTy;   ///  int*

public:
  CodeGenModule(CodeGeneration &codeGeneration);

public:
  void EmitSpaceDecl(const SpaceDecl *moduleDecl);
};

} // namespace stone
#endif
