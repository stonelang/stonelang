#ifndef TYPE
#define TYPE(ID, Parent)
#endif

#ifndef ABSTRACT_TYPE
#define ABSTRACT_TYPE(ID, Parent)
#endif

#ifndef TYPE_RANGE
#define TYPE_RANGE(ID, First, Last) /* Specify range metadata */
#endif

#ifndef LAST_TYPE
#define LAST_TYPE(ID)
#endif

// === Root Types ===
TYPE(Fun,   Type)
TYPE(Void,  Type)
TYPE(Int,   Type)
TYPE(UInt,  Type)
TYPE(Float, Type)
TYPE(Bool,  Type)
TYPE(Char,  Type)
TYPE(Null,  Type)
TYPE(String,Type)

// === Nominal Types (user-defined) ===
ABSTRACT_TYPE(Nominal, Type)
  TYPE(Enum,     NominalType)
  TYPE(Struct,   NominalType)
  TYPE(Interface, NominalType)
  TYPE_RANGE(Nominal, Enum, Interface)

// === Magic Types (syntactic sugar, non-canonical) ===
ABSTRACT_TYPE(Magic, Type)
  TYPE(Alias, MagicType)
  TYPE(Auto,  MagicType)
  TYPE_RANGE(Magic, Alias, Auto)

// === Access Types (non-boxable, modifiers) ===
ABSTRACT_TYPE(Access, Type)
  TYPE(Ptr, AccessType)
  TYPE(Ref, AccessType)
  TYPE_RANGE(Access, Ptr, Ref)

// === Aggregate Types (compound layout) ===
ABSTRACT_TYPE(Aggregate, Type)
TYPE(ArrayType,    AggregateType)
TYPE(TupleType,    AggregateType)
TYPE(VariadicType, AggregateType)
TYPE_RANGE(Aggregate, ArrayType, VariadicType)

// === Final Tag ===
LAST_TYPE(VariadicType)

// === Cleanup ===
#undef TYPE
#undef ABSTRACT_TYPE
#undef TYPE_RANGE
#undef LAST_TYPE
