#ifndef TYPE
#define TYPE(ID, Parent)
#endif

// REAL TYPES
#ifndef BUILTIN_TYPE
#define BUILTIN_TYPE(ID, Parent) TYPE(ID, Parent)
#endif

#ifndef SUG_TYPE
#define SUG_TYPE(ID, Parent) TYPE(ID, parent)
#endif


// ABSTRACT TYPPES
#ifndef ABSTRACT_TYPE
#define ABSTRACT_TYPE(ID, Parent)
#endif

#ifndef ABSTRACT_SUG_TYPE
#define ABSTRACT_SUG_TYPE(ID, Parent) ABSTRACT_TYPE(ID, Parent)
#endif



#ifndef TYPE_RANGE
#define TYPE_RANGE(ID, First, Last) /* Specify range metadata */
#endif

#ifndef LAST_TYPE
#define LAST_TYPE(ID)
#endif

// === Root Type ===
TYPE(Any, Type)
// === Builtin Types (Boxable) ===
ABSTRACT_TYPE(Builtin, AnyType)
  ABSTRACT_TYPE(Number, BuiltinType)
    BUILTIN_TYPE(Int, NumberType)
    BUILTIN_TYPE(Int8, NumberType)
    BUILTIN_TYPE(Int16, NumberType)
    BUILTIN_TYPE(Int32, NumberType)
    BUILTIN_TYPE(Int64, NumberType)
    BUILTIN_TYPE(Int128, NumberType)
    BUILTIN_TYPE(UInt, NumberType)
    BUILTIN_TYPE(UInt8, NumberType)
    BUILTIN_TYPE(UInt16, NumberType)
    BUILTIN_TYPE(UInt32, NumberType)
    BUILTIN_TYPE(UInt64, NumberType)
    BUILTIN_TYPE(UInt128, NumberType)
    BUILTIN_TYPE(Float, NumberType)
    BUILTIN_TYPE(Float16, NumberType)
    BUILTIN_TYPE(Float32, NumberType)
    BUILTIN_TYPE(Float64, NumberType)
    BUILTIN_TYPE(Float128, NumberType)
    BUILTIN_TYPE(Bool, BuiltinType)
    BUILTIN_TYPE(Char, BuiltinType)
    BUILTIN_TYPE(Null, BuiltinType)
TYPE_RANGE(Builtin, Int, Null)

// === Sugared Types (Aliases and String) ===
ABSTRACT_SUG_TYPE(Sug, AnyType)
  SUG_TYPE(Alias, SugType)
TYPE_RANGE(Sug, Alias, Alias)


// === Deduced Types ===
ABSTRACT_TYPE(Deduced, Type)
  TYPE(Auto, DeducedType)
TYPE_RANGE(Deduced, Auto, Auto)

// === Function Types ===
ABSTRACT_TYPE(Function, Type)
  TYPE(Fun, FunctionType)
TYPE_RANGE(Function, Fun, Fun)

// === Access Types (Non-boxable, modifiers) ===
ABSTRACT_TYPE(Access, Type)
  ABSTRACT_TYPE(Pointer, AccessType)
    TYPE(Ptr, PointerType)
    TYPE(Move, PointerType)
    TYPE(Own, PointerType)
    TYPE(Safe, PointerType)
    TYPE_RANGE(Pointer, Ptr, Safe)
  ABSTRACT_TYPE(Reference, AccessType)
    TYPE(Ref, ReferenceType)
    TYPE_RANGE(Reference, Ref, Ref)
TYPE_RANGE(Access, Ptr, Ref)

// === Nominal Types (User-defined, Boxable) ===
ABSTRACT_TYPE(Nominal, AnyType)
  TYPE(Enum, NominalType)
  TYPE(Struct, NominalType)
  TYPE(Interface, NominalType)
TYPE_RANGE(Nominal, Enum, Interface)
LAST_TYPE(Interface)


// === Cleanup ===
#undef TYPE
#undef BUILTIN_TYPE
#undef ABSTRACT_TYPE
#undef ABSTRACT_SUG_TYPE
#undef TYPE_RANGE
#undef LAST_TYPE
