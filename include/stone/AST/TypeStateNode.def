
/// TYPESTATE(Id, Parent)
///   The TypeFlight's enumerator value is TypeFlightKind::Id.  The TypeFlight's
///   class name is Id##TypeFlight, and the name of its base class is Parent.
#ifndef TYPESTATE
# error Included TypeFlightNode.def without defining TYPESTATE!
#endif

/// An abstract node is an abstract base class in the hierarchy;
/// it is never a most-derived type, and it does not have an enumerator in
/// TypeFlightKind.
///
/// Most metaprograms do not care about abstract classes, so the default
/// is to ignore them.
#ifndef ABSTRACT_TYPESTATE
#define ABSTRACT_TYPESTATE(Id, Parent)
#endif

/// SPECIFIER_TYPESTATE(Id, Parent)
///
/// A specific TypeFlight that's a child of SpecifierTypeFlight.
#ifndef SPECIFIER_TYPESTATE
#define SPECIFIER_TYPESTATE TYPESTATE
#endif

#ifndef LAST_TYPESTATE
#define LAST_TYPESTATE(Id)
#endif
  
TYPESTATE(Module,   TypeFlight)
TYPESTATE(Function, TypeFlight)
TYPESTATE(Builtin, TypeFlight)
TYPESTATE(Nominal, TypeFlight)

ABSTRACT_TYPESTATE(Identifier, TypeFlight)
  TYPESTATE(Normal, IdentifierTypeFlight)
  TYPESTATE(Ptr, IdentifierTypeFlight)
  TYPESTATE(Ref, IdentifierTypeFlight)
  TYPESTATE(Ref, IdentifierTypeFlight)


LAST_TYPESTATE(Function)

#undef SPECIFIER_TYPESTATE
#undef ABSTRACT_TYPESTATE
#undef TYPESTATE
#undef LAST_TYPESTATE
